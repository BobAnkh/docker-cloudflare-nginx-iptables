#!/bin/bash

# This script outputs iptables rules compatible with iptables-restore.
# The rules are designed to block traffic that is not from whitelisted
# addresses which is destined for a published docker container port.
#
# Expects the following environment variables set in confd scope:
#  - FW_MODE      either 'docker' for DOCKER-USER rules, or 'host' for INPUT
#  - FW_GRIDS     comma-separated list of grids to enumerate nodes from
#  - FW_SERVICE   friendly name for the service
#  - FW_PROTO     protocol to allow (tcp|udp)
#  - FW_PORTS     comma-separated list of port numbers to allow
#
# Optional:
#  - FW_DENY      deny behavior - e.g. DROP or REJECT (default: REJECT)
#
# Example:
#  $ iptables.sh | iptables-restore --counters --noflush

# Get public interface name
IF=$(ip route | awk '/^default/{print $5}')

service=cloudflare

# target=DOCKER-USER
prefix=DOCKER-$service
chain=$prefix-$(openssl rand 3 -hex)

echo "# Generated by iptables.sh: $service $protos $ports"
echo "# Public interface: $IF"
iptables-save -t mangle | sed "/$prefix-/d;/^COMMIT$/d;/^#/d"

# Allow the firewall to be disabled
if [[ "{{getenv "FW_DISABLE"}}" = "1" ]]; then
  echo COMMIT
  exit 0
fi

# Add new chain
echo -N ${chain}

# Allow source IPs
# for addr in $(curl https://www.cloudflare.com/ips-v4); do
#  echo -A ${chain} -s ${addr} -j RETURN -m comment --comment "static-entry"
# done
{{range $addr := curl "https://www.cloudflare.com/ips-v4"}}
    echo -A ${chain} -s {{$addr)}} -j RETURN -m comment --comment "static-entry"
{{end}}

# Deny all other IPs
echo -A ${chain} -j DROP

# Insert rule into PREROUTING
echo -A PREROUTING -i $IF -p tcp -m multiport --dports 80,443 -j ${chain}

echo COMMIT
echo "# Complete"
